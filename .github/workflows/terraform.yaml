on:
  workflow_call:
    inputs:
      mode:
        required: false
        default: deploy
        type: string
        description: The mode of the workflow (deploy/destroy)
      site:
        type: string
        description: Site used for job execution on non multisite jobs
        required: true
      state_file:
        type: string
        description: Terraform State Filename
        required: true
      directory:
        type: string
        description: Terraform Working Directory
      execute_apply:
        type: string
        description: Apply Terraform Plan
        required: false
        default: 'false'
    secrets:
      mastertoken:
      arm_client_id:
      arm_client_secret:
      arm_subscription_id:
      arm_tenant_id:
      azure_storage_account_name:
      azure_storage_container_name:

jobs:
  plan:
    name: Terraform Plan
    runs-on: ${{ inputs.site }}
    defaults:
      run:
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Mode Check
        run: echo "::warning title=WORKFLOW RUNNING IN DESTRUCTIVE MODE::Warning this workflow is running in destructive mode"
        if: ${{ inputs.mode == 'destroy'}}
      - name: Checkout Repository (${{ github.event.repository.name }})
        uses: actions/checkout@v4
        with:
          path: "${{ github.event.repository.name }}"
      - name: Checkout Repository (ansible-vault)
        uses: actions/checkout@v4
        with:
          path: ansible-vault
          token: ${{secrets.mastertoken}}
          ref: 'main'
          repository: 'epichouse/ansible-vault'
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Azure Login
        run: az login --service-principal -u ${{secrets.ARM_CLIENT_ID}} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
      - name: Configure GitHub Authentication
        run: git config --global url."https://${{secrets.MASTERTOKEN }}@github.com".insteadOf "https://github.com"
      - name: Populate Vault Password File
        run: echo $PASS > ~/.vault
        shell: bash
        env:
          PASS: ${{ secrets.VAULT_PASSWORD }}
      - name: Decrypt Ansible Vault
        run:  ls -la && ansible-vault decrypt ../../../../../../ansible-vault/vaults/prod.yml --vault-password-file ~/.vault



      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" -backend-config="key=${{ inputs.state_file }}" -backend-config="use_azuread_auth=true" -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}"
      - name: Terraform Plan (Deploy Mode)
        run: terraform plan -out=tfplan
        if: inputs.mode == 'deploy'
      - name: Terraform Plan (Destroy Mode)
        run: terraform plan -out=tfplan -destroy
        if: inputs.mode == 'destroy'
      - name: Upload Plan for Apply
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.mode}}
          path: ${{ inputs.directory }}/tfplan

  apply:
    name: Terraform Apply
    runs-on: ${{ inputs.site }}
    defaults:
      run:
        working-directory: ./${{ inputs.directory }}
    needs: plan
    if: ${{ inputs.execute_apply == 'true' }} 
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Mode Check
        run: echo "::warning title=WORKFLOW RUNNING IN DESTRUCTIVE MODE::Warning this workflow is running in destructive mode"
        if: ${{ inputs.mode == 'destroy'}}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.mode}}
          path: ${{ inputs.directory }}/
      - name: Azure Login
        run: az login --service-principal -u ${{secrets.ARM_CLIENT_ID}} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" -backend-config="key=${{ inputs.state_file }}" -backend-config="use_azuread_auth=true" -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"   
