on:
  workflow_call:
    inputs:
      mode:
        required: false
        default: deploy
        type: string
        description: The mode of the workflow (deploy/destroy)
      site:
        type: string
        description: Site used for job execution on non multisite jobs
        required: true
      azure_storage_key:
        type: string
        description: Terraform State Filename
        required: true
      azure_storage_account_name:
        type: string
        description: Azure Storage Account Name
        required: true
      azure_storage_container_name:
        type: string
        description: Azure Storage Container Name
        required: true
      azure_resource_group_name:
        type: string
        description: Azure Resource Group Name
        required: true
      directory:
        type: string
        description: Terraform Working Directory
      execute_apply:
        type: string
        description: Apply Terraform Plan
        required: false
        default: 'false'
    secrets:
      mastertoken:
      arm_client_id:
      arm_client_secret:
      arm_subscription_id:
      arm_tenant_id:
      ansible_vault_password:

jobs:
  plan:
    name: Terraform Plan
    runs-on: ${{ inputs.site }}
    environment: epichouse
    defaults:
      run:
        working-directory: "${{ github.event.repository.name }}"
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Mode Check
        run: echo "::warning title=WORKFLOW RUNNING IN DESTRUCTIVE MODE::Warning this workflow is running in destructive mode"
        if: ${{ inputs.mode == 'destroy'}}
      - name: Checkout Repository (${{ github.event.repository.name }})
        uses: actions/checkout@v4
        with:
          path: "${{ github.event.repository.name }}"

      - name: Checkout Repository (ansible-core)
        uses: actions/checkout@v5
        with:
          path: 'ansible-core'
          token: '${{ secrets.mastertoken }}'
          ref: 'main'
          repository: 'epichouse/ansible-core'

      - name: Populate Password File
        uses: 1arp/create-a-file-action@0.4.5
        with:
          path: '.'
          isAbsolutePath: false
          file: '.vault'
          content: ${{ secrets.ansible_vault_password }}


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Azure Login
        run: |
          az login \
          --service-principal \
          -t ${{ secrets.ARM_TENANT_ID }} \
          -u ${{secrets.ARM_CLIENT_ID}} \
          -p ${{ secrets.ARM_CLIENT_SECRET }} \
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="storage_account_name=${{ inputs.AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ inputs.AZURE_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ inputs.AZURE_STORAGE_KEY }}" \
          -backend-config="use_azuread_auth=true" \
          -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
          -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}" \
          -backend-config="resource_group_name=${{ inputs.AZURE_RESOURCE_GROUP_NAME }}" \
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Terraform State List
        run: terraform state list
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Terraform Plan (Deploy Mode)
        run: terraform plan -out=tfplan
        if: inputs.mode == 'deploy'
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Terraform Plan (Destroy Mode)
        run: terraform plan -out=tfplan -destroy
        if: inputs.mode == 'destroy'
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Upload Plan for Apply
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.mode}}
          path: ${{ github.event.repository.name }}/${{ inputs.directory }}/tfplan

  apply:
    name: Terraform Apply
    runs-on: ${{ inputs.site }}
    defaults:
      run:
        working-directory: "${{ github.event.repository.name }}"
    needs: plan
    if: ${{ inputs.execute_apply == 'true' }}
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Mode Check
        run: echo "::warning title=WORKFLOW RUNNING IN DESTRUCTIVE MODE::Warning this workflow is running in destructive mode"
        if: ${{ inputs.mode == 'destroy'}}
      - name: Checkout Repository (${{ github.event.repository.name }})
        uses: actions/checkout@v4
        with:
          path: "${{ github.event.repository.name }}"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.mode}}
          path: ${{ github.event.repository.name }}/${{ inputs.directory }}/
      - name: Azure Login
        run: |
          az login \
          --service-principal \
          -t ${{ secrets.ARM_TENANT_ID }} \
          -u ${{secrets.ARM_CLIENT_ID}} \
          -p ${{ secrets.ARM_CLIENT_SECRET }} \
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="storage_account_name=${{ inputs.AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ inputs.AZURE_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ inputs.AZURE_STORAGE_KEY }}" \
          -backend-config="use_azuread_auth=true" \
          -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
          -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}" \
          -backend-config="resource_group_name=${{ inputs.AZURE_RESOURCE_GROUP_NAME }}" \
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"
      - name: Terraform State List (Post Apply)
        run: terraform state list
        working-directory: "${{ github.event.repository.name }}/${{ inputs.directory }}"